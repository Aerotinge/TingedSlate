# AGE_OF_MARRIAGE_MALE and AGE_OF_MARRIAGE_FEMALE should be at least 16
generate_familes_effect = {
	if = {
		limit = {
			is_married = no
			can_marry = yes
		}

		set_character_flag = recieved_royal_marriage_aid_duty
		if = {
			limit = { is_female = yes }

			create_character = {
				age = 16
				religion = THIS
				culture = THIS
				dynasty = actually_culture
				random_traits = yes
			}
		}
		else = {
			create_character = {
				age = 16
				female = yes
				religion = THIS
				culture = THIS
				dynasty = actually_culture
				random_traits = yes
			}
		}

		new_character = {
			set_character_flag = in_relationship_with_@PREV
			export_to_variable = {
				which = age_aging
				value = age
				who = PREV
			}
			subtract_variable = {
				which = age_aging
				value = 16
			}
			while = {
				limit = {
					check_variable = {
						which = age_aging
						value >= 1
					}
				}
				add_age = 1
				subtract_variable = {
					which = age_aging
					value = 1
				}
			}
			#randomness?
			if = {
				limit = { has_religion_feature = religion_matriarchal }
				add_spouse_matrilineal = PREV
			}
			else = {
				add_spouse = PREV
			}
			log = "[Prev.GetBestName] has a spouse [This.GetBestName] generated and aged"
		}

		# Polygamy
		if = {
			limit = {
				has_polygamy = yes
				is_main_spouse = yes
				can_marry = yes
			}

			set_variable = {
				which = polygamy_attempts
				value = 3 # If any religion using max_wives more than 4, update this
			}
			while = {
				limit = {
					can_marry = yes
					check_variable = {
						which = polygamy_attempts
						value >= 1
					}
				}

				random = {
					chance = 25

					mult_modifier = {
						factor = 1.5
						higher_real_tier_than = KING
					}

					mult_modifier = {
						factor = 1.3
						higher_real_tier_than = DUKE
					}

					mult_modifier = {
						factor = 1.2
						higher_real_tier_than = COUNT
					}

					mult_modifier = {
						factor = 1.7
						OR = {
							trait = hedonist
							trait = lustful
						}
					}

					if = {
						limit = { is_female = yes }

						create_character = {
							age = 16
							religion = THIS
							culture = THIS
							dynasty = actually_culture
							random_traits = yes
						}
					}
					else = {
						create_character = {
							age = 16
							female = yes
							religion = THIS
							culture = THIS
							dynasty = actually_culture
							random_traits = yes
						}
					}

					new_character = {
						set_character_flag = in_relationship_with_@PREV
						export_to_variable = {
							which = age_aging
							value = age
							who = PREV
						}
						subtract_variable = {
							which = age_aging
							value = 16
						}
						while = {
							limit = {
								check_variable = {
									which = age_aging
									value >= 1
								}
							}
							add_age = 1
							subtract_variable = {
								which = age_aging
								value = 1
							}
						}
						#randomness?
						if = {
							limit = { has_religion_feature = religion_matriarchal }
							add_spouse_matrilineal = PREV
						}
						else = {
							add_spouse = PREV
						}

						log = "[Prev.GetBestName] has an extra spouse [This.GetBestName] generated and aged"
					}
				}

				subtract_variable = {
					which = polygamy_attempts
					value = 1
				}
			}
			set_variable = {
				which = polygamy_attempts
				value = 0
			}
		}
	}

	# Consortship
	# TODO: aging
	if = {
		limit = {
			is_adult = yes
			has_concubinage = yes # Does it return true for tribal?
			NOT = {
				any_consort = { always = yes }
			}
		}

		set_variable = {
			which = consortship_attempts
			value = 3 # If any religion using max_consorts more than 3, update this
		}
		while = {
			limit = {
				check_variable = {
					which = consortship_attempts
					value >= 1
				}
			}

			random = {
				chance = 25

				mult_modifier = {
					factor = 1.5
					higher_real_tier_than = KING
				}

				mult_modifier = {
					factor = 1.3
					higher_real_tier_than = DUKE
				}

				mult_modifier = {
					factor = 1.2
					higher_real_tier_than = COUNT
				}

				mult_modifier = {
					factor = 1.7
					OR = {
						trait = hedonist
						trait = lustful
					}
				}

				if = {
					limit = { is_female = yes }

					create_character = {
						age = 16
						religion = THIS
						culture = THIS
						dynasty = none
						random_traits = yes
					}
				}
				else = {
					create_character = {
						age = 16
						female = yes
						religion = THIS
						culture = THIS
						dynasty = none
						random_traits = yes
					}
				}

				new_character = {
					set_character_flag = in_relationship_with_@PREV
					export_to_variable = {
						which = age_aging
						value = age
						who = PREV
					}
					subtract_variable = {
						which = age_aging
						value = 16
					}
					while = {
						limit = {
							check_variable = {
								which = age_aging
								value >= 1
							}
						}
						add_age = 1
						subtract_variable = {
							which = age_aging
							value = 1
						}
					}
					#randomness?
					save_event_target_as = consort_target
					PREV = { add_consort = event_target:consort_target }
					clear_event_target = consort_target
					log = "[Prev.GetBestName] has an extra consort [This.GetBestName] generated and aged"
				}
			}

			subtract_variable = {
				which = consortship_attempts
				value = 1
			}
		}
		set_variable = {
			which = consortship_attempts
			value = 0
		}
	}

	# Then, generate a sort of random amount of children
	if = {
		limit = {
			is_adult = yes
			has_children = no
			OR = {
				any_consort = { has_character_flag = in_relationship_with_@PREV }
				any_spouse = { has_character_flag = in_relationship_with_@PREV }
			}
		}

		log = "ongoing child spawning"

		set_variable = {
			which = age_to_consume
			value = 0
		}
		export_to_variable = {
			which = age_to_achieve
			value = age
		}

		while = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = age_to_consume
						which = age_to_achieve
					}
				}
			}

			random = { # 11 percent chance to have a child per year, from 45~17 in 28 times. expecation <3.08 child
				chance = 11

				mult_modifier = {
					factor = 0
					check_variable = {
						which = age_to_consume
						value <= 17 # base marriage age with one year pregnanancy
					}
				}

				mult_modifier = {
					factor = 1.5
					check_variable = {
						which = age_to_consume
						value >= 20
					}
					NOT = { num_of_children >= 1 }
				}

				mult_modifier = {
					factor = 1.35
					check_variable = {
						which = age_to_consume
						value >= 25
					}
					NOT = { num_of_children >= 2 }
				}

				mult_modifier = {
					factor = 0.9
					check_variable = {
						which = age_to_consume
						value >= 30 # Getting old and lower the possibility
					}
				}

				mult_modifier = {
					factor = 0.8
					check_variable = {
						which = age_to_consume
						value >= 35 # Getting old and lower the possibility
					}
				}

				mult_modifier = {
					factor = 0.7
					check_variable = {
						which = age_to_consume
						value >= 40 # Getting old and lower the possibility
					}
				}

				mult_modifier = {
					factor = 0.6
					check_variable = {
						which = age_to_consume
						value <= 20 # Might yet married
					}
				}

				mult_modifier = {
					factor = 0
					check_variable = {
						which = age_to_consume
						value >= 45 # Too old, skip this run once
					}
				}

				mult_modifier = {
					factor = 0
					AND = {
						is_infertile_trigger = yes
						NOR = { # These traits aint so infertile
							trait = scholarly_theologian
							trait = mastermind_theologian
							trait = chaste
						}
					}
				}

				mult_modifier = {
					factor = 1.3
					is_fertile_trigger = yes
				}

				mult_modifier = {
					factor = 1.15
					is_female = no
					any_spouse = {
						count >= 2
						has_character_flag = in_relationship_with_@PREV
					}
				}

				mult_modifier = {
					factor = 1.25
					is_female = no
					any_spouse = {
						count >= 3
						has_character_flag = in_relationship_with_@PREV
					}
				}

				mult_modifier = {
					factor = 1.3
					is_female = no
					any_spouse = {
						count >= 4
						has_character_flag = in_relationship_with_@PREV
					}
				}

				mult_modifier = {
					factor = 1.15
					is_female = no
					any_consort = {
						count >= 2
						has_character_flag = in_relationship_with_@PREV
					}
				}

				mult_modifier = {
					factor = 1.25
					is_female = no
					any_consort = {
						count >= 3
						has_character_flag = in_relationship_with_@PREV
					}
				}

				mult_modifier = {
					factor = 1.3
					is_female = no
					any_consort = {
						count >= 4
						has_character_flag = in_relationship_with_@PREV
					}
				}

				create_character = {
					age = 0
					religion = THIS
					culture = THIS
					dynasty = THIS
					female = random
				}
				new_character = {
					set_character_flag = child_for_aging
					save_event_target_as = child_target

					if = {
						limit = {
							PREV = { is_female = yes }
						}
						set_mother = PREV

						# pick a father
						PREV = {
							random_list = {
								45 = {
									mult_modifier = {
										factor = 0
										NOT = {
											any_spouse = { has_character_flag = in_relationship_with_@PREV }
										}
									}

									random_spouse = {
										limit = { has_character_flag = in_relationship_with_@PREV }

										event_target:child_target = {
											set_father = PREV
										}

										if = {
											limit = { is_married_matrilineally = no }

											event_target:child_target = {
												dynasty = PREV
											}
										}
									}
								}
								45 = {
									mult_modifier = {
										factor = 0
										NOT = {
											any_consort = { has_character_flag = in_relationship_with_@PREV }
										}
									}

									random_consort = {
										limit = { has_character_flag = in_relationship_with_@PREV }
										event_target:child_target = {
											set_father = PREV
											add_trait = child_of_consort_male
										}
									}
								}
								# Lover...? for bastard
								#10 = {
								#	random_lover = {
								#		limit = { has_character_flag = in_relationship_with_@PREVPREV }
								#		event_target:child_target = {
								#			set_father = PREV
								#			add_trait = bastard
								#		}
								#	}
								#}
							}
						}
					}
					else = {
						set_father = PREV

						# pick a mother
						PREV = {
							random_list = {
								45 = {
									mult_modifier = {
										factor = 0
										NOT = {
											any_spouse = { has_character_flag = in_relationship_with_@PREV }
										}
									}

									random_spouse = {
										limit = { has_character_flag = in_relationship_with_@PREV }

										event_target:child_target = {
											set_mother = PREV
										}

										if = {
											limit = { is_married_matrilineally = yes }

											event_target:child_target = {
												dynasty = PREV
											}
										}
									}
								}
								45 = {
									mult_modifier = {
										factor = 0
										NOT = {
											any_consort = { has_character_flag = in_relationship_with_@PREV }
										}
									}

									random_consort = {
										limit = { has_character_flag = in_relationship_with_@PREV }
										event_target:child_target = {
											set_mother = PREV
											add_trait = child_of_consort
										}
									}
								}
								# Lover...? for bastard
								#10 = {
								#	random_lover = {
								#		limit = { has_character_flag = in_relationship_with_@PREVPREV }
								#		event_target:child_target = {
								#			set_mother = PREV
								#			add_trait = bastard
								#		}
								#	}
								#}
							}
						}
					}
					clear_event_target = child_target
				}
			}

			change_variable = {
				which = age_to_consume
				value = 1
			}
			any_child = {
				limit = { has_character_flag = child_for_aging }
				add_age = 1

				if = {
					limit = {
						age == 16
					}
					random_list = {
						10 = { add_trait = naive_appeaser }
						10 = { add_trait = misguided_warrior }
						10 = { add_trait = indulgent_wastrel }
						10 = { add_trait = amateurish_plotter }
						10 = { add_trait = detached_priest }
					}
					while = {
						count = 3
						random = {
							chance = 17
							mult_modifier = {
								#factor = 1.5
								factor = 2
								has_bottom_tier_education_trait_trigger = yes
							}
							mult_modifier = {
								factor = 1.2
								has_2nd_tier_education_trait_trigger = yes
							}

							upgrade_education_effect = yes
						}
					}
				}
				# simply random trait
				random = {
					chance = 34

					mult_modifier = {
						factor = 0
						OR = {
							NOT = { age = 6 }
							age = 16
							num_of_traits >= 6
						}
					}
					mult_modifier = {
						factor = 0.8
						num_of_traits >= 5
					}
					mult_modifier = {
						factor = 0.8
						num_of_traits >= 4
					}
					mult_modifier = {
						factor = 0.9
						num_of_traits >= 3
					}
					mult_modifier = {
						factor = 1.5
						num_of_traits == 0
					}

					random_list = {
						2 = { add_trait_silently_ambitious_effect = yes }
						2 = { add_trait_silently_arbitrary_effect = yes }
						2 = { add_trait_silently_brave_effect = yes }
						2 = { add_trait_silently_charitable_effect = yes }
						2 = { add_trait_silently_chaste_effect = yes }
						2 = { add_trait_silently_craven_effect = yes }
						2 = { add_trait_silently_cruel_effect = yes }
						2 = { add_trait_silently_cynical_effect = yes }
						2 = { add_trait_silently_content_effect = yes }
						2 = { add_trait_silently_deceitful_effect = yes }
						2 = { add_trait_silently_diligent_effect = yes }
						2 = { add_trait_silently_envious_effect = yes }
						2 = { add_trait_silently_gluttonous_effect = yes }
						2 = { add_trait_silently_greedy_effect = yes }
						2 = { add_trait_silently_gregarious_effect = yes }
						2 = { add_trait_silently_honest_effect = yes }
						2 = { add_trait_silently_humble_effect = yes }
						2 = { add_trait_silently_kind_effect = yes }
						2 = { add_trait_silently_lustful_effect = yes }
						2 = { add_trait_silently_patient_effect = yes }
						2 = { add_trait_silently_proud_effect = yes }
						2 = { add_trait_silently_shy_effect = yes }
						2 = { add_trait_silently_slothful_effect = yes }
						2 = { add_trait_silently_stubborn_effect = yes }
						2 = { add_trait_silently_temperate_effect = yes }
						2 = { add_trait_silently_trusting_effect = yes }
						2 = { add_trait_silently_wroth_effect = yes }
						2 = { add_trait_silently_zealous_effect = yes }
					}
				}
			}
		}
		# cleanup
		set_variable = {
			which = age_to_consume
			value = 0
		}
		set_variable = {
			which = age_to_achieve
			value = 0
		}
		any_child = {
			limit = { has_character_flag = child_for_aging }
			clr_character_flag = child_for_aging
		}
		recalc_succession = yes
	}
}